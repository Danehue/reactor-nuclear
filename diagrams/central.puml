@startuml

skinparam lineType ortho

class CentralNuclear {
    - reactor: Reactor
}

class Reactor implements EstadoSetter{
    - operadores: Operador[]
    - combustible: float
    - capacidad: int
    - sensor: Sensor
    - mecanismoDeControl: MecanismoDeControl
    - notificador: NotificadorEstadoReactor
    - estado: Estado
    - info: InfoEstadoReactor
    + Constructor(capacidad: int, e: Estado)
    + iniciar()
    + producir()
    + detener()
    + cambiarEstado(temp: float, this: EstadoSetter)
    + obtenerTemperatura()
}

interface EstadoSetter {
    + setEstado(e: Estado)
}

class Sensor {
    - temperatura: float
    - suscriptor: Reactor
    + suscribir(r: Reactor)
    + desuscribir(r: Reactor)
    + notificar()
    + getTemperatura()
    + setTemperatura(temp: float)
}


interface MecanismoDeControl {
    + enfriar(r: Reactor)
}

class MecanismoBarrasDeControl implements MecanismoDeControl {
    - barras: Barra[]
    - cantUtilizada: int
    + enfriar(r: Reactor)
}
class Barra {
    - vidaUtil: int
    + getPorcentajeReduccion()
}


class NotificadorEstadoReactor {
    - suscriptores: Suscriptor[]
    - jefe: Suscriptor

    + suscribir(s: Operador)
    + suscribir(j: Jefe)
    + desuscribir(s: Operador)
    + desuscribir(j: Jefe)
    + notificar(r: Reactor, x: CambioEstado)
}

interface Suscriptor {
    + actualizar(r: Reactor)
}

class Operador implements Suscriptor {
    - mecanismo: MecanismoDeControl
    + constructor(m: MecanismoDeControl)
    + actualizar(r: Reactor)
}

class Jefe implements Suscriptor{
    + actualizar()
}

abstract Estado {
    + abstract cambiarEstado(temp: float, e: EstadoSetter): CambioEstado
    + producir()
}

interface EstadoSetter {
    + setEstado(e: Estado)
}

class Normal extends Estado{
    + cambiarEstado(temp: float): CambioEstado
    - cambiarACriticidad(): boolean
}
class Critico extends Estado{
    + cambiarEstado(temp: float): CambioEstado
    + producir()
    - cambiarACritico(): boolean
    - cambiarANormal(): boolean
}
class Apagado extends Estado{
    + cambiarEstado(temp: float): CambioEstado
    + producir()
    - cambiarANormal(): boolean
}

enum CambioEstado {
    NO_CAMBIO
    NORMAL
    CRITICO
    APAGADO
}

class InfoEstadoReactor {
    - mapaInfo: Map
    + constructor()
}

'Relaciones
CentralNuclear *.. Reactor

' Reactor o.. Combustible
Reactor o.. Sensor
Reactor o.r. MecanismoDeControl
Reactor o.l. NotificadorEstadoReactor
Reactor o.. Estado
Reactor o.. InfoEstadoReactor
Reactor o.. Operador
Reactor ..|> EstadoSetter

NotificadorEstadoReactor o.u. Suscriptor
MecanismoBarrasDeControl o.. Barra

MecanismoBarrasDeControl o.r[hidden]. MecanismoDeControl
Suscriptor o.u[hidden]. Operador

Note right of Reactor::producir 
    estado.producir()
end Note
Note right of Reactor::cambiarEstado 
    x = estado.cambiarEstado(temp, this)
    agregar x al mapa
    notificador.notificar(x)
end Note
Note left of Sensor::notificar 
    suscriptor.cambiarEstado(getTemperatura())
end Note
Note left of Sensor::setTemperatura 
    this.temperatura = temp
    this.notificar()
end Note
Note left of InfoEstadoReactor::constructor 
    inicializar el mapa
end Note
Note left of NotificadorEstadoReactor::notificar 
    if(x == CambioEstado.CRITICO) ...
    if(x == CambioEstado.APAGADO) ...
end Note
Note left of Operador::actualizar 
    mecanismo.enfriar(r: Reactor)
end Note

@enduml

